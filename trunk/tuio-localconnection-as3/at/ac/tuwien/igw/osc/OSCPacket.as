package at.ac.tuwien.igw.osc {		import flash.utils.ByteArray;	import flash.errors.EOFError;		/**	 * An OSCPacket	 * This is a basic class for OSCBundles and OSCMessages that basically wraps a ByteArray	 * and offers some additional functions for reading the binary data for extending classes.	 * 	 * @author Immanuel Bauer	 */	public class OSCPacket {				protected var bytes:ByteArray;				public function OSCPacket(bytes:ByteArray) {			this.bytes = bytes;		}				public function getPacketInfo():String {			return "packet";		}				public function getBytes():ByteArray {			return this.bytes;		}				protected function skipNullString():void {			var char:String = new String();			while(this.bytes.bytesAvailable > 0){				char = this.bytes.readUTFBytes(1);				if(char != ""){					this.bytes.position -= 1;					break;				}			}		}				protected function readString():String {			var out:String = new String();			var char:String = new String();			while(this.bytes.bytesAvailable > 0){				char = this.bytes.readUTFBytes(1);				if(char == "") break;				else out += char;			}			var bits:int = (out.length + 1) * 8;			while((bits % 32) != 0){				this.bytes.position += 1;				bits += 8;			}			return out;		}				protected function readTimetag():OSCTimetag {			var seconds:uint = this.bytes.readUnsignedInt();			var picoseconds:uint = this.bytes.readUnsignedInt();						return new OSCTimetag(seconds, picoseconds);		}				protected function readBlob():ByteArray {			var length:int = this.bytes.readInt();			var blob:ByteArray = new ByteArray();			this.bytes.readBytes(blob, 0, length);						var bits:int = (length + 1) * 8;			while((bits % 32) != 0){				this.bytes.position += 1;				bits += 8;			}						return blob;		}			}	}