package at.ac.tuwien.igw.osc {		import flash.utils.ByteArray;		/**	 * An OSCMessage	 * @author Immanuel Bauer	 */	public class OSCMessage extends OSCPacket {				private var headContent:String;		private var pattern:String;		private var action:String;		private var argumentArray:Array;				public function OSCMessage(bytes:ByteArray) {			super(bytes);			this.headContent = this.readString();						this.pattern = this.readString();						this.argumentArray = new Array();						for(var c:int = 0; c < this.pattern.length; c++){				switch(this.pattern.charAt(c)){					case "s": argumentArray.push(this.readString()); break;					case "f": argumentArray.push(this.bytes.readFloat()); break;					case "i": argumentArray.push(this.bytes.readInt()); break;					default: break;				}			}		}				public function get head():String {			return headContent;		}				public function get arguments():Array {			return argumentArray;		}				public override function getPacketInfo():String {			var out:String = new String();			out += "\nMessagehead: " + this.head + " | " + this.pattern + " | ->  (" + this.argumentArray.length + ") \n" + this.argumentsToString() ;			return out;		}				public function argumentsToString():String{			var out:String = "arguments: ";			out += this.argumentArray[0].toString();			for(var c:int = 1; c < this.argumentArray.length; c++){				out += " | " + this.argumentArray[c].toString();			}			return out;		}			}	}