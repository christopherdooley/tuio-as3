package at.ac.tuwien.igw.osc {		import flash.utils.ByteArray;		/**	 * An OSCBundle	 * @author Immanuel Bauer	 */	public class OSCBundle extends OSCPacket {				private var contentBytes:ByteArray;		private var content:Array;				private var timeSeconds:uint;		private var timePicoseconds:uint;		private var date:Date;				private const SECONDS_1900_1970:uint = 2208988800;				public function OSCBundle(bytes:ByteArray) {			super(bytes);			this.bytes.readUTFBytes(8);			this.timeSeconds = this.bytes.readUnsignedInt();			this.timePicoseconds = this.bytes.readUnsignedInt();			this.contentBytes = new ByteArray();			this.bytes.readBytes(this.contentBytes, 0, this.bytes.bytesAvailable);			this.content = new Array();			getSubPackets();		}				public function getContent(pos:uint):OSCPacket {			if(pos < content.length){				return content[pos];			} else {				return null;			}		}				public function get subPacketCount():uint {			return this.content.length;		}				private function getSubPackets():void {			while (this.contentBytes.bytesAvailable > 0) {				var blockLength:int = this.contentBytes.readInt();				var cBytes:ByteArray = new ByteArray();				this.contentBytes.readBytes(cBytes, 0, blockLength);								var header:String = cBytes.readUTFBytes(8);								cBytes.position = 0;								if (header == "#bundle") {					this.content.push(new OSCBundle(cBytes));				} else {					this.content.push(new OSCMessage(cBytes));				}			}		}				public override function getPacketInfo():String {			var out:String = new String();			out += "\nSeconds: " + this.timeSeconds.toString();			out += "\nPicoseconds: " + this.timePicoseconds.toString();			out += "\nSubPackets: " + this.subPacketCount.toString();			for each(var item:OSCPacket in content) {				out += item.getPacketInfo();			}			return out;		}			}	}